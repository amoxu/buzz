<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.amoxu.mapper.EventMapper">
    <resultMap id="BaseResultMap" type="com.amoxu.entity.Event">
        <id column="cid" property="cid" jdbcType="INTEGER"/>
        <result column="rcid" property="rcid" jdbcType="INTEGER"/>
        <result column="uid" property="uid" jdbcType="INTEGER"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="likes" property="likes" jdbcType="INTEGER"/>
        <result column="feeling" property="feeling" jdbcType="DOUBLE"/>
        <result column="ctime" property="ctime" jdbcType="TIMESTAMP"/>
        <result column="bid" property="bid" jdbcType="INTEGER"/>


        <association property="sendUser" resultMap="userCommonInfoMap"></association>
        <association property="receiveUser" resultMap="receiveUserMap" columnPrefix="rc_"></association>

    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    event.cid, event.rcid, event.uid, event.content, event.likes, event.feeling, event.ctime, event.bid
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.amoxu.entity.EventExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from event
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limit != null">
            <if test="offset != null">
                limit ${offset}, ${limit}
            </if>
            <if test="offset == null">
                limit ${limit}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>


        ,u1.nickname

        ,comment.uid AS rc_uid
        ,u2.nickname AS rc_nickname
        from event
        LEFT JOIN `user` AS u1 ON u1.uid = event.uid
        LEFT JOIN event AS comment ON event.rcid = comment.cid
        LEFT JOIN `user` AS u2 ON u2.uid = comment.uid
        where event.cid = #{cid,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from event
    where cid = #{cid,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.amoxu.entity.EventExample">
        delete from event
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.amoxu.entity.Event">
    insert into event (cid, rcid, uid,
      content, likes, feeling, 
      ctime, bid)
    values (#{cid,jdbcType=INTEGER}, #{rcid,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER},
      #{content,jdbcType=VARCHAR}, #{likes,jdbcType=INTEGER}, #{feeling,jdbcType=DOUBLE}, 
      #{ctime,jdbcType=TIMESTAMP}, #{bid,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.amoxu.entity.Event" useGeneratedKeys="true" keyProperty="cid">
        insert into event
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="cid != null">
                cid,
            </if>
            <if test="rcid != null">
                rcid,
            </if>
            <if test="uid != null">
                uid,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="likes != null">
                likes,
            </if>
            <if test="feeling != null">
                feeling,
            </if>
            <if test="ctime != null">
                ctime,
            </if>
            <if test="bid != null">
                bid,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="cid != null">
                #{cid,jdbcType=INTEGER},
            </if>
            <if test="rcid != null">
                #{rcid,jdbcType=INTEGER},
            </if>
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="likes != null">
                #{likes,jdbcType=INTEGER},
            </if>
            <if test="feeling != null">
                #{feeling,jdbcType=DOUBLE},
            </if>
            <if test="ctime != null">
                #{ctime,jdbcType=TIMESTAMP},
            </if>
            <if test="bid != null">
                #{bid,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.amoxu.entity.EventExample" resultType="java.lang.Integer">
        select count(*) from event
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update event
        <set>
            <if test="record.cid != null">
                cid = #{record.cid,jdbcType=INTEGER},
            </if>
            <if test="record.rcid != null">
                rcid = #{record.rcid,jdbcType=INTEGER},
            </if>
            <if test="record.uid != null">
                uid = #{record.uid,jdbcType=INTEGER},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=VARCHAR},
            </if>
            <if test="record.likes != null">
                likes = #{record.likes,jdbcType=INTEGER},
            </if>
            <if test="record.feeling != null">
                feeling = #{record.feeling,jdbcType=DOUBLE},
            </if>
            <if test="record.ctime != null">
                ctime = #{record.ctime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.bid != null">
                bid = #{record.bid,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update event
        set cid = #{record.cid,jdbcType=INTEGER},
        rcid = #{record.rcid,jdbcType=INTEGER},
        uid = #{record.uid,jdbcType=INTEGER},
        content = #{record.content,jdbcType=VARCHAR},
        likes = #{record.likes,jdbcType=INTEGER},
        feeling = #{record.feeling,jdbcType=DOUBLE},
        ctime = #{record.ctime,jdbcType=TIMESTAMP},
        bid = #{record.bid,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.amoxu.entity.Event">
        update event
        <set>
            <if test="rcid != null">
                rcid = #{rcid,jdbcType=INTEGER},
            </if>
            <if test="uid != null">
                uid = #{uid,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=VARCHAR},
            </if>
            <if test="likes != null">
                likes = #{likes,jdbcType=INTEGER},
            </if>
            <if test="feeling != null">
                feeling = #{feeling,jdbcType=DOUBLE},
            </if>
            <if test="ctime != null">
                ctime = #{ctime,jdbcType=TIMESTAMP},
            </if>
            <if test="bid != null">
                bid = #{bid,jdbcType=INTEGER},
            </if>
        </set>
        where cid = #{cid,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.amoxu.entity.Event">
    update event
    set rcid = #{rcid,jdbcType=INTEGER},
      uid = #{uid,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      likes = #{likes,jdbcType=INTEGER},
      feeling = #{feeling,jdbcType=DOUBLE},
      ctime = #{ctime,jdbcType=TIMESTAMP},
      bid = #{bid,jdbcType=INTEGER}
    where cid = #{cid,jdbcType=INTEGER}
  </update>


    <resultMap id="userCommonInfoMap" type="com.amoxu.entity.User">
        <result property="nickname" column="nickname"/>
        <result property="icons" column="icons"/>
        <result property="uid" column="uid"/>
    </resultMap>
    <resultMap id="receiveUserMap" type="com.amoxu.entity.User">
        <result property="nickname" column="nickname"/>
        <result property="uid" column="uid"/>
    </resultMap>
    <resultMap id="listMap" type="com.amoxu.entity.Event">
        <id column="cid" property="cid" jdbcType="INTEGER"/>
        <result column="rcid" property="rcid" jdbcType="INTEGER"/>
        <result column="uid" property="uid" jdbcType="INTEGER"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="likes" property="likes" jdbcType="INTEGER"/>
        <result column="feeling" property="feeling" jdbcType="DOUBLE"/>
        <result column="ctime" property="ctime" jdbcType="TIMESTAMP"/>
        <result column="bid" property="bid" jdbcType="INTEGER"/>

        <result column="userLike" property="userLike"/>
        <result column="onlineId" property="onlineId"/>

        <association property="sendUser" resultMap="userCommonInfoMap"></association>
        <association property="receiveUser" resultMap="receiveUserMap" columnPrefix="rc_"></association>

        <collection property="comment" column="{onlineId=onlineId,base=cid,target=bid}"
                    select="selectMainChild"/>
    </resultMap>
    <select id="selectMain" resultMap="listMap" parameterType="map">
        /* 查询首页 按时间排序*/
        SELECT
        <include refid="Base_Column_List"/>
        ,
        `user`.uid,
        `user`.nickname,
        `user`.icons

        , like_event.uid as userLike
        ,
        <if test="onlineId != null ">
            ${onlineId}
        </if>
        <if test="onlineId == null ">
            NULL
        </if>
        AS onlineId
        FROM event
        LEFT JOIN like_event ON event.cid = like_event.events_id AND like_event.uid=
        <if test="onlineId != null">
            #{onlineId}
        </if>
        <if test="onlineId == null">
            0
        </if>
        LEFT JOIN `user` on `user`.uid = `event`.uid

        WHERE event.bid = 0 AND event.rcid=0
        <foreach collection="example.oredCriteria" item="criteria" separator="or">
            <if test="criteria.valid">
                <foreach collection="criteria.criteria" item="criterion">
                    <choose>
                        <when test="criterion.noValue">
                            and ${criterion.condition}
                        </when>
                        <when test="criterion.singleValue">
                            and ${criterion.condition} #{criterion.value}
                        </when>
                        <when test="criterion.betweenValue">
                            and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                        </when>
                        <when test="criterion.listValue">
                            and ${criterion.condition}
                            <foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
                                #{listItem}
                            </foreach>
                        </when>
                    </choose>
                </foreach>
            </if>
        </foreach>
        <if test="example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        <if test="example.limit!=0">
            limit ${example.offset}, ${example.limit}
        </if>
    </select>
    <sql id="My_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <select id="selectMainChild" resultMap="listMap" parameterType="map">
        /*查询首页子列表 热评*/

        <if test="base != 0 and target==0">

            SELECT

            tc.cid, tc.rcid, tc.uid, tc.content, tc.likes, tc.feeling, tc.ctime, tc.bid

            ,u1.nickname

            ,comment.uid AS rc_uid
            ,u2.nickname AS rc_nickname

            , like_event.uid as userLike
            ,
            <if test="onlineId != null ">
                ${onlineId}
            </if>
            <if test="onlineId == null ">
                NULL
            </if>
            AS onlineId
            FROM
            event AS tc
            LEFT JOIN `user` AS u1 ON u1.uid = tc.uid

            LEFT JOIN like_event ON tc.cid = like_event.events_id AND like_event.uid =
            <if test="onlineId != null">
                #{onlineId}
            </if>
            <if test="onlineId == null">
                0
            </if>

            LEFT JOIN event AS comment ON tc.cid = comment.cid
            LEFT JOIN `user` AS u2 ON u2.uid = comment.uid

            WHERE tc.bid=#{base}
            ORDER BY likes DESC, tc.ctime DESC

            LIMIT 4
        </if>


    </select>

    <select id="selectChild" resultMap="listMap" parameterType="map">
        /*有回复ID 查询子列表*/
        SELECT
        event.cid, event.rcid, event.uid, event.content, event.likes, event.feeling, event.ctime, event.bid
        ,
        `user`.uid,
        `user`.nickname,
        `user`.icons

        ,comment.uid AS rc_uid
        ,u2.nickname AS rc_nickname

        , like_event.uid as userLike
        ,
        <if test="onlineId != null ">
            ${onlineId}
        </if>
        <if test="onlineId == null ">
            NULL
        </if>
        AS onlineId
        FROM event

        LEFT JOIN like_event ON event.cid = like_event.events_id AND like_event.uid=
        <if test="onlineId != null">
            #{onlineId}
        </if>
        <if test="onlineId == null">
            0
        </if>
        LEFT JOIN `user` on `user`.uid = `event`.uid

        LEFT JOIN event AS comment ON event.cid = comment.rcid
        LEFT JOIN `user` AS u2 ON u2.uid = comment.uid

        <include refid="My_By_Example_Where_Clause"/>

        <if test="example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        <if test="example.limit!=0">
            limit ${example.offset}, ${example.limit}
        </if>

    </select>

    <select id="selectBaseUser" parameterType="int" resultType="User">
        SELECT user.uid,user.icons,user.nickname
        FROM buzz.user
        LEFT JOIN event e ON user.uid = e.uid
        WHERE e.cid = #{bid}
    </select>
</mapper>