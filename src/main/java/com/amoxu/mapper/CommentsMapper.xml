<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.amoxu.mapper.CommentsMapper">
    <resultMap id="BaseResultMap" type="com.amoxu.entity.Comments">
        <id column="cid" property="cid" jdbcType="INTEGER"/>
        <result column="rcid" property="rcid" jdbcType="INTEGER"/>
        <result column="uid" property="uid" jdbcType="INTEGER"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="likes" property="likes" jdbcType="INTEGER"/>
        <result column="feeling" property="feeling" jdbcType="DOUBLE"/>
        <result column="ctime" property="ctime" jdbcType="TIMESTAMP"/>
        <result column="buzz_id" property="buzzId" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    comments.cid, comments.rcid, comments.uid, comments.content, comments.likes,
     comments.feeling, comments.ctime, comments.buzz_id
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.amoxu.entity.CommentsExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from comments
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limit != null">
            <if test="offset != null">
                limit ${offset}, ${limit}
            </if>
            <if test="offset == null">
                limit ${limit}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from comments
        where cid = #{cid,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from comments
    where cid = #{cid,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.amoxu.entity.CommentsExample">
        delete from comments
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.amoxu.entity.Comments">
    insert into comments (cid, rcid, uid,
      content, likes, feeling, 
      ctime, buzz_id)
    values (#{cid,jdbcType=INTEGER}, #{rcid,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, 
      #{content,jdbcType=VARCHAR}, #{likes,jdbcType=INTEGER}, #{feeling,jdbcType=DOUBLE}, 
      #{ctime,jdbcType=TIMESTAMP}, #{buzzId,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.amoxu.entity.Comments">
        insert into comments
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="cid != null">
                cid,
            </if>
            <if test="rcid != null">
                rcid,
            </if>
            <if test="uid != null">
                uid,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="likes != null">
                likes,
            </if>
            <if test="feeling != null">
                feeling,
            </if>
            <if test="ctime != null">
                ctime,
            </if>
            <if test="buzzId != null">
                buzz_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="cid != null">
                #{cid,jdbcType=INTEGER},
            </if>
            <if test="rcid != null">
                #{rcid,jdbcType=INTEGER},
            </if>
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="likes != null">
                #{likes,jdbcType=INTEGER},
            </if>
            <if test="feeling != null">
                #{feeling,jdbcType=DOUBLE},
            </if>
            <if test="ctime != null">
                #{ctime,jdbcType=TIMESTAMP},
            </if>
            <if test="buzzId != null">
                #{buzzId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.amoxu.entity.CommentsExample" resultType="java.lang.Integer">
        select count(cid) from comments
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update comments
        <set>
            <if test="record.cid != null">
                cid = #{record.cid,jdbcType=INTEGER},
            </if>
            <if test="record.rcid != null">
                rcid = #{record.rcid,jdbcType=INTEGER},
            </if>
            <if test="record.uid != null">
                uid = #{record.uid,jdbcType=INTEGER},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=VARCHAR},
            </if>
            <if test="record.likes != null">
                likes = #{record.likes,jdbcType=INTEGER},
            </if>
            <if test="record.feeling != null">
                feeling = #{record.feeling,jdbcType=DOUBLE},
            </if>
            <if test="record.ctime != null">
                ctime = #{record.ctime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.buzzId != null">
                buzz_id = #{record.buzzId,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update comments
        set cid = #{record.cid,jdbcType=INTEGER},
        rcid = #{record.rcid,jdbcType=INTEGER},
        uid = #{record.uid,jdbcType=INTEGER},
        content = #{record.content,jdbcType=VARCHAR},
        likes = #{record.likes,jdbcType=INTEGER},
        feeling = #{record.feeling,jdbcType=DOUBLE},
        ctime = #{record.ctime,jdbcType=TIMESTAMP},
        buzz_id = #{record.buzzId,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.amoxu.entity.Comments">
        update comments
        <set>
            <if test="rcid != null">
                rcid = #{rcid,jdbcType=INTEGER},
            </if>
            <if test="uid != null">
                uid = #{uid,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=VARCHAR},
            </if>
            <if test="likes != null">
                likes = #{likes,jdbcType=INTEGER},
            </if>
            <if test="feeling != null">
                feeling = #{feeling,jdbcType=DOUBLE},
            </if>
            <if test="ctime != null">
                ctime = #{ctime,jdbcType=TIMESTAMP},
            </if>
            <if test="buzzId != null">
                buzz_id = #{buzzId,jdbcType=INTEGER},
            </if>
        </set>
        where cid = #{cid,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.amoxu.entity.Comments">
    update comments
    set rcid = #{rcid,jdbcType=INTEGER},
      uid = #{uid,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      likes = #{likes,jdbcType=INTEGER},
      feeling = #{feeling,jdbcType=DOUBLE},
      ctime = #{ctime,jdbcType=TIMESTAMP},
      buzz_id = #{buzzId,jdbcType=INTEGER}
    where cid = #{cid,jdbcType=INTEGER}
  </update>


    <resultMap id="userCommonInfoMap" type="com.amoxu.entity.User">
        <result property="nickname" column="nickname"/>
        <result property="icons" column="icons"/>
        <result property="uid" column="uid"/>
    </resultMap>

    <resultMap id="listMap" type="com.amoxu.entity.Comments">
        <id column="cid" property="cid" jdbcType="INTEGER"/>
        <result column="rcid" property="rcid" jdbcType="INTEGER"/>
        <result column="uid" property="uid" jdbcType="INTEGER"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="likes" property="likes" jdbcType="INTEGER"/>
        <result column="feeling" property="feeling" jdbcType="DOUBLE"/>
        <result column="ctime" property="ctime" jdbcType="TIMESTAMP"/>
        <result column="buzz_id" property="buzzId" jdbcType="INTEGER"/>

        <result column="userLike" property="userLike"/>

        <association property="sendUser" resultMap="userCommonInfoMap" columnPrefix="send_"></association>
        <association property="receiveUser" column="{rcid = rcid,buzzId=buzz_id}" select="getReceive"></association>


    </resultMap>


    <sql id="My_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Msc_Column_List">
        msc.cid, msc.rcid, msc.uid, msc.content, msc.likes,
        msc.feeling, msc.ctime, msc.buzz_id
    </sql>

    <!--
        param : rcid    回复id 不为0时 查rcid的uid
                baseid  rcid为0时查baseid的 uid
        -->
    <select id="getReceive" resultMap="userCommonInfoMap" parameterType="map">
        <if test="rcid != 0">/*comments表中有*/
            SELECT user.uid,`user`.icons,`user`.nickname
            from buzz.comments
            LEFT JOIN `user` ON `user`.uid = comments.uid
            where comments.cid = #{rcid}
        </if>
        <if test="rcid == 0">/*回复热评。*/
            SELECT
            buzz_netease.user_id uid,
            user_name nickname
            from buzz_netease
            LEFT JOIN comments c2 ON buzz_netease.id = c2.buzz_id
            where buzz_netease.id = #{buzzId}
            limit 1
        </if>

    </select>

    <!--
    param : onlineId    在线用户id，用于检查是否点赞
            baseId      分享ID，用于查询子列表
    -->
    <select id="selectMainChild" resultMap="listMap" parameterType="map">
        /*查询首页子列表 热评*/
        SELECT
        /*评论信息*/
        <include refid="Msc_Column_List"/>
        ,
        /*发送方信息*/
        u1.nickname as send_nickname,
        u1.icons as send_icons,
        u1.uid as send_uid,

        c2.uid as userLike

        FROM
        comments msc
        LEFT JOIN buzz.user u1 ON u1.uid = msc.uid/*发表用户的信息*/
        LEFT JOIN like_comments c2 ON msc.cid = c2.comments_id AND c2.uid=
        <if test="onlineId != null">
            #{onlineId}
        </if>
        <if test="onlineId == null">
            0
        </if>
        WHERE msc.buzz_id=#{baseId}
        ORDER BY likes DESC, msc.ctime DESC
        LIMIT 4
    </select>
    <select id="selectChild" resultMap="listMap" parameterType="map">
        /*有回复ID 查询子列表*/

        SELECT

        <include refid="Msc_Column_List"/>,
        /*发送方信息*/
        u1.nickname as send_nickname,
        u1.icons as send_icons,
        u1.uid as send_uid,
        /*接受方信息*/

        c2.uid as userLike


        FROM

        buzz.comments msc
        LEFT JOIN buzz.user u1 ON u1.uid = msc.uid/*发表用户的信息*/

        LEFT JOIN like_comments c2 ON msc.cid = c2.comments_id AND c2.uid=
        <if test="onlineId != null">
            #{onlineId}
        </if>
        <if test="onlineId == null">
            0
        </if>

        WHERE msc.buzz_id = #{baseId}
        <include refid="My_By_Example_Where_Clause"/>

        <if test="example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        <if test="example.limit!=0">
            limit ${example.offset}, ${example.limit}
        </if>
    </select>
</mapper>