<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.amoxu.mapper.MusicShareCommentMapper">
    <resultMap id="BaseResultMap" type="com.amoxu.entity.MusicShareComment">
        <id column="cid" property="cid" jdbcType="INTEGER"/>
        <result column="rcid" property="rcid" jdbcType="INTEGER"/>
        <result column="uid" property="uid" jdbcType="INTEGER"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="likes" property="likes" jdbcType="INTEGER"/>
        <result column="feeling" property="feeling" jdbcType="DOUBLE"/>
        <result column="ctime" property="ctime" jdbcType="TIMESTAMP"/>
        <result column="base_cid" property="baseCid" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    music_share_content.cid, music_share_content.rcid, music_share_content.uid,
     music_share_content.content, music_share_content.likes, music_share_content.feeling,
      music_share_content.ctime, music_share_content.base_cid

  </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.amoxu.entity.MusicShareCommentExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from music_share_content
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limit != null">
            <if test="offset != null">
                limit ${offset}, ${limit}
            </if>
            <if test="offset == null">
                limit ${limit}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="listMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        /*发送方信息*/
        ,u1.nickname as send_nickname,
        u1.icons as send_icons,
        u1.uid as send_uid,
        /*接受方信息*/
        u2.nickname as receive_nickname,
        u2.icons as receive_icons,
        u2.uid as receive_uid


        FROM
        music_share_content
        LEFT JOIN buzz.user u1 ON u1.uid = music_share_content.uid/*发表用户的信息*/
        LEFT JOIN music_share_content content ON music_share_content.cid = content.rcid
        LEFT JOIN buzz.user u2 ON content.uid = u2.uid

        where music_share_content.cid = #{cid,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from music_share_content
    where cid = #{cid,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.amoxu.entity.MusicShareCommentExample">
        delete from music_share_content
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.amoxu.entity.MusicShareComment" keyProperty="cid" useGeneratedKeys="true">
    insert into music_share_content (cid, rcid, uid, 
       content, likes,
      feeling, ctime, base_cid
      )
    values (#{cid,jdbcType=INTEGER}, #{rcid,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, 
       #{content,jdbcType=VARCHAR}, #{likes,jdbcType=INTEGER},
      #{feeling,jdbcType=DOUBLE}, #{ctime,jdbcType=TIMESTAMP}, #{baseCid,jdbcType=INTEGER}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.amoxu.entity.MusicShareComment" keyProperty="cid"
            useGeneratedKeys="true">
        insert into music_share_content
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="cid != null">
                cid,
            </if>
            <if test="rcid != null">
                rcid,
            </if>
            <if test="uid != null">
                uid,
            </if>

            <if test="content != null">
                content,
            </if>
            <if test="likes != null">
                likes,
            </if>
            <if test="feeling != null">
                feeling,
            </if>
            <if test="ctime != null">
                ctime,
            </if>
            <if test="baseCid != null">
                base_cid,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="cid != null">
                #{cid,jdbcType=INTEGER},
            </if>
            <if test="rcid != null">
                #{rcid,jdbcType=INTEGER},
            </if>
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>

            <if test="content != null">
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="likes != null">
                #{likes,jdbcType=INTEGER},
            </if>
            <if test="feeling != null">
                #{feeling,jdbcType=DOUBLE},
            </if>
            <if test="ctime != null">
                #{ctime,jdbcType=TIMESTAMP},
            </if>
            <if test="baseCid != null">
                #{baseCid,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.amoxu.entity.MusicShareCommentExample"
            resultType="java.lang.Integer">
        select count(cid) from music_share_content
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update music_share_content
        <set>
            <if test="record.cid != null">
                cid = #{record.cid,jdbcType=INTEGER},
            </if>
            <if test="record.rcid != null">
                rcid = #{record.rcid,jdbcType=INTEGER},
            </if>
            <if test="record.uid != null">
                uid = #{record.uid,jdbcType=INTEGER},
            </if>

            <if test="record.content != null">
                content = #{record.content,jdbcType=VARCHAR},
            </if>
            <if test="record.likes != null">
                likes = #{record.likes,jdbcType=INTEGER},
            </if>
            <if test="record.feeling != null">
                feeling = #{record.feeling,jdbcType=DOUBLE},
            </if>
            <if test="record.ctime != null">
                ctime = #{record.ctime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.baseCid != null">
                base_cid = #{record.baseCid,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update music_share_content
        set cid = #{record.cid,jdbcType=INTEGER},
        rcid = #{record.rcid,jdbcType=INTEGER},
        uid = #{record.uid,jdbcType=INTEGER},
        content = #{record.content,jdbcType=VARCHAR},
        likes = #{record.likes,jdbcType=INTEGER},
        feeling = #{record.feeling,jdbcType=DOUBLE},
        ctime = #{record.ctime,jdbcType=TIMESTAMP},
        base_cid = #{record.baseCid,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.amoxu.entity.MusicShareComment">
        update music_share_content
        <set>
            <if test="rcid != null">
                rcid = #{rcid,jdbcType=INTEGER},
            </if>
            <if test="uid != null">
                uid = #{uid,jdbcType=INTEGER},
            </if>

            <if test="content != null">
                content = #{content,jdbcType=VARCHAR},
            </if>
            <if test="likes != null">
                likes = #{likes,jdbcType=INTEGER},
            </if>
            <if test="feeling != null">
                feeling = #{feeling,jdbcType=DOUBLE},
            </if>
            <if test="ctime != null">
                ctime = #{ctime,jdbcType=TIMESTAMP},
            </if>
            <if test="baseCid != null">
                base_cid = #{baseCid,jdbcType=INTEGER},
            </if>
        </set>
        where cid = #{cid,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.amoxu.entity.MusicShareComment">
    update music_share_content
    set rcid = #{rcid,jdbcType=INTEGER},
      uid = #{uid,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      likes = #{likes,jdbcType=INTEGER},
      feeling = #{feeling,jdbcType=DOUBLE},
      ctime = #{ctime,jdbcType=TIMESTAMP},
      base_cid = #{baseCid,jdbcType=INTEGER}
    where cid = #{cid,jdbcType=INTEGER}
  </update>


    <resultMap id="userCommonInfoMap" type="com.amoxu.entity.User">
        <result property="nickname" column="nickname"/>
        <result property="icons" column="icons"/>
        <result property="uid" column="uid"/>
    </resultMap>

    <resultMap id="listMap" type="com.amoxu.entity.MusicShareComment">
        <id column="cid" property="cid" jdbcType="INTEGER"/>
        <result column="rcid" property="rcid" jdbcType="INTEGER"/>
        <result column="uid" property="uid" jdbcType="INTEGER"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="likes" property="likes" jdbcType="INTEGER"/>
        <result column="feeling" property="feeling" jdbcType="DOUBLE"/>
        <result column="ctime" property="ctime" jdbcType="TIMESTAMP"/>
        <result column="base_cid" property="baseCid" jdbcType="INTEGER"/>

        <result column="userLike" property="userLike"/>

        <association property="sendUser" resultMap="userCommonInfoMap" columnPrefix="send_"></association>
        <association property="receiveUser" column="{rcid = rcid,baseId=base_cid}" select="getReceive"></association>


    </resultMap>


    <sql id="My_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <!--
        param : rcid    回复id 不为0时 查rcid的uid
                baseid  rcid为0时查baseid的 uid
        -->
    <select id="getReceive" resultMap="userCommonInfoMap" parameterType="map">
        <if test="rcid != 0">
            SELECT user.uid,`user`.icons,`user`.nickname
            from music_share_content
            LEFT JOIN `user` ON `user`.uid = music_share_content.uid
            where music_share_content.cid = #{rcid}
        </if>
        <if test="rcid == 0">
            SELECT user.uid,`user`.icons,`user`.nickname
            from music_share_content
            LEFT JOIN music_share ON music_share_content.base_cid = music_share.oid
            LEFT JOIN `user` ON `user`.uid = music_share.uid
            where music_share.oid = #{baseId}
            limit 1
        </if>

    </select>
    <sql id="Msc_Column_List">
        msc.cid, msc.rcid, msc.uid,
        msc.content, msc.likes, msc.feeling,
        msc.ctime, msc.base_cid

    </sql>
    <!--
    param : onlineId    在线用户id，用于检查是否点赞
            baseId      分享ID，用于查询子列表
    -->
    <select id="selectMainChild" resultMap="listMap" parameterType="map">
        /*查询首页子列表 热评*/
        SELECT
        /*评论信息*/
        <include refid="Msc_Column_List"/>,
        /*发送方信息*/
        u1.nickname as send_nickname,
        u1.icons as send_icons,
        u1.uid as send_uid,
        c2.uid as userLike
        FROM
        music_share_content msc
        LEFT JOIN buzz.user u1 ON u1.uid = msc.uid/*发表用户的信息*/
        LEFT JOIN like_music_share_comment c2 ON msc.cid = c2.oid AND c2.uid=
        <if test="onlineId != null">
            #{onlineId}
        </if>
        <if test="onlineId == null">
            0
        </if>
        WHERE msc.base_cid=#{baseId}
        ORDER BY likes DESC, msc.ctime DESC
        LIMIT 4
    </select>
    <select id="selectChild" resultMap="listMap" parameterType="map">
        /*有回复ID 查询子列表*/

        SELECT

        <include refid="Msc_Column_List"/>
,
        /*发送方信息*/
        u1.nickname as send_nickname,
        u1.icons as send_icons,
        u1.uid as send_uid,


        c2.uid as userLike


        FROM

        music_share_content msc
        LEFT JOIN buzz.user u1 ON u1.uid = msc.uid/*发表用户的信息*/
        LEFT JOIN music_share_content content ON msc.cid = content.rcid
        LEFT JOIN like_music_share_comment c2 ON msc.cid = c2.oid AND c2.uid=
        <if test="onlineId != null">
            #{onlineId}
        </if>
        <if test="onlineId == null">
            0
        </if>

        WHERE msc.base_cid = #{baseId}
        <include refid="My_By_Example_Where_Clause"/>

        <if test="example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        <if test="example.limit!=0">
            limit ${example.offset}, ${example.limit}
        </if>
    </select>
</mapper>