<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.amoxu.mapper.SettingMapper" >
  <resultMap id="BaseResultMap" type="com.amoxu.entity.Setting" >
    <id column="sid" property="sid" jdbcType="INTEGER" />
    <result column="uid" property="uid" jdbcType="INTEGER" />
    <result column="comment" property="comment" jdbcType="INTEGER" />
    <result column="friend" property="friend" jdbcType="INTEGER" />
    <result column="note" property="note" jdbcType="BIT" />
    <result column="nearby" property="nearby" jdbcType="BIT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    sid, uid, comment, friend, note, nearby
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.amoxu.entity.SettingExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from setting
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limit != null" >
      <if test="offset != null" >
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null" >
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from setting
    where sid = #{sid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from setting
    where sid = #{sid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.amoxu.entity.SettingExample" >
    delete from setting
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.amoxu.entity.Setting" >
    insert into setting (sid, uid, comment, 
      friend, note, nearby)
    values (#{sid,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, #{comment,jdbcType=INTEGER}, 
      #{friend,jdbcType=INTEGER}, #{note,jdbcType=BIT}, #{nearby,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.amoxu.entity.Setting" >
    insert into setting
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="sid != null" >
        sid,
      </if>
      <if test="uid != null" >
        uid,
      </if>
      <if test="comment != null" >
        comment,
      </if>
      <if test="friend != null" >
        friend,
      </if>
      <if test="note != null" >
        note,
      </if>
      <if test="nearby != null" >
        nearby,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="sid != null" >
        #{sid,jdbcType=INTEGER},
      </if>
      <if test="uid != null" >
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="comment != null" >
        #{comment,jdbcType=INTEGER},
      </if>
      <if test="friend != null" >
        #{friend,jdbcType=INTEGER},
      </if>
      <if test="note != null" >
        #{note,jdbcType=BIT},
      </if>
      <if test="nearby != null" >
        #{nearby,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.amoxu.entity.SettingExample" resultType="java.lang.Integer" >
    select count(*) from setting
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update setting
    <set >
      <if test="record.sid != null" >
        sid = #{record.sid,jdbcType=INTEGER},
      </if>
      <if test="record.uid != null" >
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.comment != null" >
        comment = #{record.comment,jdbcType=INTEGER},
      </if>
      <if test="record.friend != null" >
        friend = #{record.friend,jdbcType=INTEGER},
      </if>
      <if test="record.note != null" >
        note = #{record.note,jdbcType=BIT},
      </if>
      <if test="record.nearby != null" >
        nearby = #{record.nearby,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update setting
    set sid = #{record.sid,jdbcType=INTEGER},
      uid = #{record.uid,jdbcType=INTEGER},
      comment = #{record.comment,jdbcType=INTEGER},
      friend = #{record.friend,jdbcType=INTEGER},
      note = #{record.note,jdbcType=BIT},
      nearby = #{record.nearby,jdbcType=BIT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.amoxu.entity.Setting" >
    update setting
    <set >
      <if test="uid != null" >
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="comment != null" >
        comment = #{comment,jdbcType=INTEGER},
      </if>
      <if test="friend != null" >
        friend = #{friend,jdbcType=INTEGER},
      </if>
      <if test="note != null" >
        note = #{note,jdbcType=BIT},
      </if>
      <if test="nearby != null" >
        nearby = #{nearby,jdbcType=BIT},
      </if>
    </set>
    where sid = #{sid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.amoxu.entity.Setting" >
    update setting
    set uid = #{uid,jdbcType=INTEGER},
      comment = #{comment,jdbcType=INTEGER},
      friend = #{friend,jdbcType=INTEGER},
      note = #{note,jdbcType=BIT},
      nearby = #{nearby,jdbcType=BIT}
    where sid = #{sid,jdbcType=INTEGER}
  </update>
</mapper>